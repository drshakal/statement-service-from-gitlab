<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="        http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd        http://camel.apache.org/schema/spring       https://camel.apache.org/schema/spring/camel-spring.xsd">
    <!--      <bean class="in.co.dhdigital.processors.AccountDetailsProcessor" id="accountDetailsProcessor"/>
    <bean class="in.co.dhdigital.aggregators.AccountDetailsAggregator" id="accountDetailsAggretor"/>
    <bean class="in.co.dhdigital.processors.StatementCacheProcessor" id="statementCacheProcessor"/>
    <bean class="in.co.dhdigital.processors.StatementGetCacheProcessor" id="statementGetCacheProcessor"/>
       <bean class="in.co.dhdigital.routes.StatementRest" id="statementrest"/> -->
    <camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">
        <!--       <dataFormats>
            <json id="convertAccountDetailsResponse" library="Jackson"
                objectMapper="com.camel.CustomObjectMapper" unmarshalTypeName="in.co.dhdigital.models.AccountDetailsResponse"/>
            <json id="convertRestartResponse" library="Jackson"
                objectMapper="com.camel.CustomObjectMapper" unmarshalTypeName="in.co.dhdigital.models.RestartResponse"/>
        </dataFormats>
        <restConfiguration bindingMode="json" component="jetty"
            host="0.0.0.0" port="8081"/>
        <rest id="rest-id" path="/api/v1/statement">
            <get id="get-account-details"
                outType="in.co.dhdigital.models.StatementServiceResponse" uri="/{accountnumber}">
                <to id="_to11" uri="direct:cache"/>
            </get>
        </rest>
        <route id="cache">
            <from id="from-cache" uri="direct:cache"/>
            <process id="process3" ref="statementGetCacheProcessor"/>
            <choice id="_choice1">
                <when id="_when1">
                    <simple>${header.found} != 'true'</simple>
                    <to id="_to1" uri="direct:get-account-details-route"/>
                </when>
                <otherwise id="_otherwise1">
                    <process id="process2" ref="statementCacheProcessor"/>
                </otherwise>
            </choice>
        </route>
        <route id="get-account-details-route">
            <from id="_from1" uri="direct:get-account-details-route"/>
            <log id="_log1" message="Inside get-account-details-route1"/>
            <log id="_log2" message="Headers: ${headers}"/>
            <doTry id="_doTry3">
                <toD id="_to2" uri="http://{{urls.account-service}}/api/v1/accountdetails/${headers.accountnumber}?bridgeEndpoint=true"/>
                <unmarshal id="_unmarshal1">
                    <custom ref="convertAccountDetailsResponse"/>
                </unmarshal>
                <enrich id="_enrich1" strategyRef="accountDetailsAggretor">
                    <constant>direct:get-restart</constant>
                </enrich>
                <log id="_log4" message="StatementServiceResponse: ${body} "/>
                <process id="process1" ref="statementCacheProcessor"/>
                <doCatch id="_doCatch3">
                    <exception>java.lang.Exception</exception>
                    <log id="_log3" message="Error while calling Transaction Service: ${body} "/>
                </doCatch>
            </doTry>
        </route>
        <route id="get-restart">
            <from id="from2" uri="direct:get-restart"/>
            <setBody id="_setBody1">
                <constant/>
            </setBody>
            <toD id="to3" uri="http://{{urls.restart-service}}/api/v1/restart?bridgeEndpoint=true"/>
            <unmarshal id="_unmarshal2">
                <custom ref="convertRestartResponse"/>
            </unmarshal>
            <log id="log4" message="RestartResponse: ${body}"/>
        </route>  -->
    </camelContext>
</beans>
